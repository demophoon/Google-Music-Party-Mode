<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Google Music Remote Player</title>
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css">
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap-theme.min.css">
        <style type='text/css'>
            body {
                background-color: #eee;
                padding-bottom: 110px;
            }
            .controls {
                white-space: nowrap;
                width: 55px;
            }
            .glyphicon {
                color: #333;
            }
            .glyphicon:hover {
                color: #666;
            }
            .playing .glyphicon {
                color: #fff;
            }
            .playing .glyphicon:hover {
                color: #aaa;
            }
            .playing {
                background-color: #333;
                color: #fff;
            }
            .playing:hover {
                background-color: #666;
                color: #fff;
            }
            #musicPicker {
                margin-left: 300px;
                padding-right: 10px;
            }
            #albumArt {
                position: fixed;
                z-index: 11;
                bottom: 0px;
                left: 0px;
                width: 100px;
                height: 100px;
                background: #ccc;
            }
            #albumArt img {
                width: 100px;
                height: 100px;
            }
            #currentSong {
                position: fixed;
                z-index: 10;
                bottom: 0px;
                padding-left: 110px;
                left: 0px;
                background: -webkit-canvas(fft);
                background-repeat: no-repeat;
                background-color: #ccc;
                height: 75px;
                width: 100%;
                color: #222;
            }
            #songPosition {
                position: fixed;
                z-index: 10;
                bottom: 75px;
                padding-left: 100px;
                left: 0px;
                height: 5px;
                width: 100%;
                background-color: #666;
            }
            #songPosition div {
                height: 100%;
                background-color: #33B5E5;
            }
            #currentSong #title {
                font-weight: bold;
                font-size: 30px;
            }
            #currentSong #artist, #currentSong #album {
                font-size: 18px;
            }
            #queuedSongs {
                border-right: 1px solid #ddd;
                position: fixed;
                z-index: 9;
                top: 0px;
                left: 0px;
                height: 100%;
                width: 300px;
                background: #ccc;
                padding: 5px;
            }
            #queuedSongs #title {
                font-size: 18px;
                font-weight: 400;
            }
            #queuedSongs #artist, #queuedSongs #album {
                font-size: 12px;
            }
            #queuedSongs #song {
                overflow: hidden;
                height: 70px;
            }
            #queuedSongs #metadata {
                display: inline-block;
                white-space: nowrap;
                height: 45px;
            }
            #queuedSongs #queuedAlbumArt {
                height: 70px;
                width: 70px;
                margin-right: 7px;
            }
            .clear {
                both: clear;
            }
            .marquee {
                white-space: nowrap;
            }
            .marquee td {
                width: 210px;
                overflow: hidden;
                display: inline-block;
            }
        </style>
        <script src="http://code.jquery.com/jquery-1.10.1.min.js"></script> 
        <script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/knockout/2.3.0/knockout-min.js"></script>
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js"></script>
    </head>
    <body>


        <script type="text/javascript" charset="utf-8">
            url = "/api/v1/song";
            var context = null;
            var songs = [];

            var analyser = null;
            var canvas = null;
            var ctx = null;

            function scrollLeft(obj) {
                this.obj = obj;
            }
            scrollLeft.prototype = {
                reset: function() {
                    var that = this;
                    $(that.obj).scrollLeft(0);
                    $(that.obj).animate({opacity: 1}, 500, 'linear');
                    setTimeout(function() { that.scroll() }, 5500);
                },
                fadeOut: function() {
                    var that = this;
                    $(that.obj).animate({opacity: 0}, 500, 'linear', function() {
                        setTimeout(function() { that.reset(); }, 500);
                    });
                },
                scroll: function() {
                    var that = this;
                    var scroll_amount = $(that.obj)[0].scrollWidth-$(that.obj).outerWidth();
                    if (scroll_amount > 0) {
                        $(that.obj).animate({scrollLeft: scroll_amount}, scroll_amount*75, 'linear');
                        setTimeout(function() { that.fadeOut(); }, scroll_amount*75 + 3500);
                    }
                },
                start: function() {
                    var that = this;
                    setTimeout(function() { that.scroll(); }, 5000);
                }
            }

            ko.bindingHandlers.marquee = {
                init: function(elem, valueAccessor) {
                    new scrollLeft($(elem).find("td")[0]).start();
                }
            }

            function getSongData(pageNumber, songs) {
                if (pageNumber == undefined || songs == undefined) {
                    pageNumber = 0;
                    songs = [];
                }
                $.ajax({
                    url: '/api/v1/songs',
                    data: {
                        page: pageNumber,
                        items: 1000,
                    },
                    success: function(data) {
                        for (var x in data) {
                            songs.push(data[x]);
                        }
                        if (data.length == 1000) {
                            getSongData(pageNumber+1, songs);
                        } else {
                            finalSongs = ViewModel.songs();
                            for (var x in songs) {
                                if (ViewModel.indexedIds.indexOf(songs[x].storeId) == -1) {
                                    finalSongs.push(new Song(songs[x]));
                                    ViewModel.indexedIds.push(songs[x].storeId);
                                }
                            }
                            ViewModel.songs(finalSongs);
                        }
                    }
                });
            }

            function init() {
                var timer = setInterval(updateStatus, 250);

                getSongData();

                window.requestAnimFrame = (function(){
                    return  window.requestAnimationFrame       ||
                            window.webkitRequestAnimationFrame ||
                            window.mozRequestAnimationFrame    ||
                            function( callback ){
                                window.setTimeout(callback, 1000 / 60);
                            };
                })();

                try {
                    window.AudioContext = window.AudioContext||window.webkitAudioContext;
                    context = new AudioContext();
                    analyser = context.createAnalyser();
                    analyser.connect(context.destination);
                }
                catch(e) {
                    alert('Web Audio API is not supported in this browser');
                }

                canvas = {
                    height: 75,
                    width: $(window).width(),
                }
                ctx = document.getCSSCanvasContext("2d", "fft", $(window).width(), 75);

                (function animloop() {
                    requestAnimFrame(animloop);
                    analyseAudio();
                })();
            }

            var volumeDown = function(song) {
                if (song.sourceNode) {
                    song.sourceNode.gain.value -= .05;
                    if (song.sourceNode.gain.value > 0) {
                        setTimeout(function() { volumeDown(song);}, 50);
                    } else {
                        song.sourceNode.disconnect();
                        song.sourceNode = null;
                        song.status("ready");
                    }
                }
            }

            var sources = [];
            function playBuffer(song, delay_play) {
                buffer = song.buffer;
                if (delay_play == null) {
                    delay_play = 0;
                }
                if (delay_play <= 0) {
                    delay_play = 0;
                    for (var x in sources) {
                        volumeDown(sources.pop());
                    }
                }
                song.sourceNode = context.createBufferSource();
                song.sourceNode.buffer = buffer;
                song.sourceNode.connect(analyser);
                song.sourceNode.onended = function() {
                    song.sourceNode.disconnect();
                    song.sourceNode = null;
                    ViewModel.queue.shift();
                    song.status("ready");
                }
                song.sourceNode.start(context.currentTime + delay_play);
                song.status("playing");
                var start_time = context.currentTime + delay_play;
                song.start(start_time);
                sources.push(song)
                //sources.push({source: source, start: start_time});
            }

            function analyseAudio() {
                var FFTArray = new Float32Array(1024);
                analyser.getFloatFrequencyData(FFTArray);
                //ctx.clearRect(0,0,canvas.width,canvas.height);
                ctx.globalAlpha = .05;
                ctx.fillStyle = ViewModel.backgroundColor();
                ctx.fillRect(0,0,canvas.width,canvas.height);
                ctx.globalAlpha = .50;
                ctx.fillStyle = ViewModel.primaryColor();
                for (var x=0; x<FFTArray.length; x+=1) {
                    // ctx.fillRect((x/FFTArray.length)*canvas.width,canvas.height,FFTArray.length/canvas.width,(FFTArray[x]+200)*-2);
                    ctx.fillRect(100+(x/FFTArray.length)*canvas.width,canvas.height,3,(FFTArray[x]+75)*-2);
                }
            }

            function updateStatus() {

                now = context.currentTime;

                queue = ViewModel.queue();
                currentSong = ViewModel.currentSong();

                if (currentSong) {
                    ViewModel.calculatedPosition(currentSong.calculatedPosition());
                }

                if (queue.length > 0) {
                    queue[0].play();
                }

                // Preload Songs
                if (currentSong && currentSong.status() == "playing" && currentSong.buffer.duration - currentSong.position() < 1) {
                    nextSong = (currentSong.buffer.duration - currentSong.position())
                    if (queue.length >= 1) {
                        queue[1].play(nextSong - .3);
                    }
                } else if (ViewModel.calculatedPosition() >= .5) {
                    var preloadedSongs = 0;
                    var maxSongs = 2;
                    for (var x=1; x<queue.length && preloadedSongs < maxSongs; x+=1) {
                        if (queue[x].status() == "new") {
                            queue[x].download();
                            break;
                        }
                        preloadedSongs += 1;
                    }
                    readySongs = ViewModel.readySongs();
                    for (var x=0; x<readySongs.length; x+=1) {
                        if (queue.indexOf(readySongs[x]) == -1) {
                            readySongs[x].buffer = null;
                            readySongs[x].status("new");
                        }
                    }
                } else if (ViewModel.calculatedPosition() >= .05) {
                    if (queue.length >= 2 && queue[1].status() == "new") {
                        queue[1].download();
                    }
                }

            }

            // function updateStatus2() {
            //     now = context.currentTime;
            //     if (ViewModel.currentSong() && ViewModel.currentSong().start !== false && ViewModel.playStatus() == "playing") {
            //         if (now - ViewModel.currentSong().start > ViewModel.currentSong().buffer.duration - 1) {
            //             if (ViewModel.queue().length > 0 && ViewModel.queue()[0].buffer && !ViewModel.queue()[0].locked()) {
            //                 ViewModel.queue()[0].locked(true);
            //                 currentEnd = ViewModel.currentSong().start + ViewModel.currentSong().buffer.duration - .1;
            //                 delay = currentEnd - context.currentTime;
            //                 ViewModel.currentSong(ViewModel.queue.shift());
            //                 playBuffer(ViewModel.currentSong().buffer, delay);
            //             }
            //         } 
            //         if (now - ViewModel.currentSong().start > (ViewModel.currentSong().buffer.duration)) {
            //             ViewModel.currentSong(null);
            //             ViewModel.playStatus("stopped");
            //         }
            //         ViewModel.calculatedPosition(ViewModel.currentSong().position() / ViewModel.currentSong().buffer.duration);
            //     }
            //     if (ViewModel.currentSong() == null && ViewModel.queue().length > 0) {
            //         if (ViewModel.queue()[0].buffer) {
            //             ViewModel.currentSong(ViewModel.queue.shift());
            //         }
            //     }
            //     if (ViewModel.currentSong() && !ViewModel.currentSong().locked() && ViewModel.playStatus() == 'stopped') {
            //         ViewModel.playStatus("playing");
            //         playBuffer(ViewModel.currentSong().buffer, 0);
            //     }
            //     buffers = 0;
            //     maxBuffers = 2;
            //     for (var x in ViewModel.queue()) {
            //         if (buffers >= maxBuffers) {
            //             break;
            //         }
            //         if (!ViewModel.queue()[x].buffer) {
            //             if (!ViewModel.queue()[x].gettingBuffer) {
            //                 if (!ViewModel.currentSong() ) {
            //                     ViewModel.queue()[x].gettingBuffer = true;
            //                     ViewModel.queue()[x].song.download();
            //                     //downloadSong(ViewModel.queue()[x].id);
            //                 } else if (ViewModel.currentSong().position() / ViewModel.currentSong().buffer.duration > .5) {
            //                     ViewModel.queue()[x].gettingBuffer = true;
            //                     ViewModel.queue()[x].song.download();
            //                     //downloadSong(ViewModel.queue()[x].id);
            //                 }
            //                 break;
            //             }
            //         }
            //         buffers += 1;
            //     }
            // }

            $(document).ready(init);
        </script>

        <span id='albumArt' data-bind="if: currentSong()">
            <img data-bind="attr: { src: currentSong().albumart }" />
        </span>
        <div id='songPosition' data-bind="if: currentSong()">
            <div data-bind="style: { width: (calculatedPosition() * 100) + '%', backgroundColor: primaryColor }"></div>
        </div>
        <div id='currentSong' data-bind="if: currentSong()">
            <span id="metadata">
                <span id="title" data-bind="text: currentSong().title"></span><br>
                <span id="artist" data-bind="text: currentSong().artist"></span>&nbsp;&mdash;&nbsp;
                <span id="album" data-bind="text: currentSong().album"></span>
            </span>
        </div>

        <div id='queuedSongs'>
            <div data-bind="if: queue().length <= 1">
                <center><button class="btn btn-primary" data-bind="click: function() { ViewModel.populateQueue(10); }">Add 10 Random Songs To Queue</button></center>
            </div>
            <table cellspacing='0'>
                <tbody id="song" data-bind="foreach: visibleQueue">
                    <tr>
                        <td rowspan=4>
                            <img id="queuedAlbumArt" data-bind="click: removeFromQueue, attr: { src: albumart }" />
                        </td>
                    </tr>
                    <tr class="marquee" data-bind="marquee: true">
                        <td>
                            <span id="title" data-bind="text: title"></span><br>
                        </td>
                    </tr>
                    <tr class="marquee" data-bind="marquee: true">
                        <td>
                            <span id="artist" data-bind="text: artist"></span><br>
                        </td>
                    </tr>
                    <tr class="marquee" data-bind="marquee: true">
                        <td>
                            <span id="album" data-bind="text: album"></span>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div id="musicPicker">

            <center>
                <input type='text' class='form-control' data-bind="value: search, valueUpdate: 'afterkeydown'" placeholder='Search' />
                <ul class="pagination">
                    <li><a href="#" data-bind="click: prevPage">&laquo;</a></li>
                    <li><a href="#" data-bind="click: nextPage">&raquo;</a></li>
                </ul><br>
                <button class="btn btn-primary" data-bind="click: function() { ViewModel.populateQueueFromSearch(10); }">Add 10 Random Songs From Search To Queue</button>
            </center>

            <table class="table table-condensed">
                <thead>
                    <tr>
                        <th class='controls'></th>
                        <th>#</th>
                        <th>Status</th>
                        <th>Title</th>
                        <th>Artist</th>
                        <th>Album</th>
                        <th>Duration</th>
                        <th>Genre</th>
                    </tr>
                </thead>
                <tbody data-bind="foreach: visibleSongs">
                    <tr data-bind="attr: { class: status }">
                        <td class='controls'>
                            <a href="#" alt="Play" data-bind="click: playNow"><span class="glyphicon glyphicon-play"></span></a>
                            <a href="#" alt="Add to Queue" data-bind="click: addToQueue"><span class="glyphicon glyphicon-plus"></span></a>
                            <a href="#" alt="Play Song Next" data-bind="click: playNext"><span class="glyphicon glyphicon-chevron-right"></span></a>
                        </td>
                        <td data-bind="text: track"></td>
                        <td data-bind="text: status"></td>
                        <td data-bind="text: title"></td>
                        <td data-bind="text: artist"></td>
                        <td data-bind="text: album"></td>
                        <td><span data-bind="text: minutes"></span>:<span data-bind="text: seconds"></span></td>
                        <td data-bind="text: genre"></td>
                    </tr>
                </tbody>
            </table>
        </div>

        <script type="text/javascript" charset="utf-8">
            var viewModel = function() {
                var me = this;
                me.songs = ko.observableArray([]);
                me.indexedIds = [];

                me.search = ko.observable('');

                me.page = ko.observable(0);
                me.maxSongsPerPage = ko.observable(100);

                me.filteredSongs = ko.computed(function() {

                    me.songs.sort(function(a, b) {
                        asort = a.artist + a.album + ("00000" + a.track).slice(-5);
                        bsort = b.artist + b.album + ("00000" + b.track).slice(-5);
                        return asort > bsort ? 1 : bsort > asort ? -1 : 0;
                    });

                    if (me.search() == '') {
                        return me.songs();
                    } else {
                        var ret = [];
                        var rexp = RegExp(me.search(), "gi");
                        var matches = [];
                        for (var x=0; x<me.songs().length && ret.length<me.maxSongsPerPage(); x+=1) {
                            var song = me.songs()[x];
                            if (song.title.match(rexp) || song.artist.match(rexp) || song.album.match(rexp) || song.genre.match(rexp)) {
                                matches.push(me.songs()[x]);
                            }
                        }
                        return matches;
                    }
                });

                me.visibleSongs = ko.computed(function() {

                    var ret = [];
                    for (var x=me.page()*me.maxSongsPerPage(); x<(me.page()+1)*me.maxSongsPerPage() && x < me.filteredSongs().length; x+=1) {
                        ret.push(me.filteredSongs()[x]);
                    }
                    ret.sort(function(a, b) {
                        asort = a.artist + a.album + ("00000" + a.track).slice(-5);
                        bsort = b.artist + b.album + ("00000" + b.track).slice(-5);
                        return asort > bsort ? 1 : bsort > asort ? -1 : 0;
                    });
                    return ret;
                });

                me.pageCount = ko.computed(function() {
                    var pages = Math.ceil(me.filteredSongs().length / me.maxSongsPerPage());
                    if (me.page() > pages) {
                        me.page(pages - 1);
                    }
                    return pages;
                });

                me.nextPage = function() {
                    if ((me.page() + 1) * me.maxSongsPerPage() <= me.songs().length) {
                        me.page(me.page() + 1);
                    }
                }

                me.prevPage = function() {
                    if ((me.page() - 1) * me.maxSongsPerPage() >= 0) {
                        me.page(me.page() - 1);
                    }
                }

                me.calculatedPosition = ko.observable(0);

                me.primaryColor = ko.observable("#33B5E5");
                me.backgroundColor = ko.observable("#cccccc");

                me.queue = ko.observableArray([]);
                me.visibleQueue = ko.computed(function() {
                    ret = [];
                    for (var x=1; x<me.queue().length; x+=1) {
                        ret.push(me.queue()[x]);
                    }
                    return ret;
                });

                me.currentSong = ko.computed(function() {
                    if (me.queue().length > 0) {
                        return me.queue()[0];
                    } else {
                        return null;
                    }
                    var song = ko.utils.arrayFirst(me.songs(), function(song) {
                        return song.status() == "playing" || song.status() == "paused";
                    });
                    return song;
                });

                me.readySongs = ko.computed(function() {
                    return ko.utils.arrayFilter(me.songs(), function(item) {
                        return item.status() == "ready";
                    });
                });

                me.playNext = function(id) {
                    me.queue.splice(1, 0, me.generate_queue_object(id));
                    //me.queue.unshift(me.generate_queue_object(id));
                }
                me.addToQueue = function(id) {
                    me.queue.push(me.generate_queue_object(id));
                }

                me.populateQueueFromSearch = function(x) {
                    for (var i=0; i<x; i++) {
                        me.addToQueue(me.filteredSongs()[~~(Math.random() * me.visibleSongs().length)].id)
                    }
                }

                me.populateQueue = function(x) {
                    for (var i=0; i<x; i++) {
                        me.addToQueue(me.songs()[~~(Math.random() * me.songs().length)].id)
                    }
                }

                me.generate_queue_object = function(id) {
                    var song = ko.utils.arrayFirst(me.songs(), function(item) {
                        return item.id == id;
                    });
                    return song;
                }

            }

            var Artist = function(obj) {
                var me = this;
                me.id = obj.id
            }

            var Song = function(obj) {
                var me = this;
                me.id = obj.id;
                me.store_id = obj.storeId;

                me.title = obj.name;
                me.artist = obj.artist;
                me.album = obj.album;
                me.track = obj.track;
                me.genre = obj.genre;
                me.duration = obj.durationMillis;
                me.minutes = ~~(obj.durationMillis / 60000);
                me.seconds = ("00" + (obj.durationMillis / 1000) % 60).slice(-2);

                me.start = ko.observable(0);

                me.position = function() {
                    return context.currentTime - me.start();
                };

                me.calculatedPosition = function() {
                    if (currentSong !== null && (currentSong.status() == "playing" || currentSong.status() == "paused")) {
                        return me.position() / me.buffer.duration;
                    }
                    return 0;
                }


                me.buffer = null;
                me.sourceNode = null;
                me.status = ko.observable("new");

                me.download = function(callback) {
                    if (callback !== undefined) {
                        me.afterDownloadCallback = callback;
                    }
                    if (me.buffer == null && me.status() == "new") {
                        me.status("downloading");
                        var request = new XMLHttpRequest();
                        request.open('GET', url + "?song_id=" + me.id, true);
                        request.responseType = 'arraybuffer';
                        request.onload = function() {
                            me.status("decoding");
                            context.decodeAudioData(request.response, function(buffer) {
                                me.buffer = buffer;
                                me.status("ready");
                                if (me.afterDownloadCallback != null) {
                                    me.afterDownloadCallback(me);
                                    me.afterDownloadCallback = null;
                                }
                            }, function() {
                                console.warn("Error Loading Buffer");
                            });
                        }
                        request.send();
                    }
                }

                me.albumart = obj.albumArtUrl;
                me.artistart = obj.artistImageBaseUrl;

                me.artist_id = obj.artistMatchedId;
                me.album_id = obj.albumMatchedId;

                me.addToQueue = function() {
                    ViewModel.addToQueue(me.id);
                }

                me.removeFromQueue = function() {
                    ViewModel.queue.remove(function(item) {
                        return item.id == me.id;
                    });
                }

                me.afterDownloadCallback = null;

                me.playNow = function() {
                    ViewModel.queue.shift();
                    ViewModel.queue.unshift(me);
                }

                me.play = function(time) {
                    if (time === undefined) {
                        time = 0;
                    }
                    if (me.status() == "scheduled") {
                        return;
                    }
                    if (me.status() == "ready") {
                        if (time > 0) {
                            playBuffer(me, time);
                            me.status("scheduled");
                            setTimeout(function() {
                                me.status("playing");
                            }, time*1000);
                        } else {
                            playBuffer(me);
                        }
                    } else if (me.status() == "downloading" || me.status() == "decoding") {
                        me.afterDownloadCallback = playBuffer;
                    } else {
                        me.download(playBuffer);
                    }
                    //ViewModel.playNext(me.id);
                }

                me.playNext = function() {
                    ViewModel.playNext(me.id);
                }
            }

            var ViewModel = new viewModel();
            ko.applyBindings(ViewModel);
        </script>

    </body>
</html>
